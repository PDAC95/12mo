# Generated by Django 5.0.1 on 2025-09-19 14:52

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("budgets", "0003_budgetchangerequest_changehistorylog_and_more"),
        ("spaces", "0005_spacesettings"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="budget",
            name="actual_spend_dates",
            field=models.JSONField(
                default=list,
                help_text="Historical dates when this expense was actually paid (for pattern analysis)",
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="due_date",
            field=models.DateField(
                blank=True,
                help_text="Exact due date for fixed date expenses",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="last_behavior_analysis",
            field=models.DateTimeField(
                blank=True,
                help_text="When behavior analysis was last updated for this budget",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="preferred_time_of_day",
            field=models.CharField(
                choices=[
                    ("morning", "Morning"),
                    ("afternoon", "Afternoon"),
                    ("evening", "Evening"),
                    ("anytime", "Anytime"),
                ],
                default="anytime",
                help_text="Preferred time of day for this expense",
                max_length=20,
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="range_description",
            field=models.CharField(
                blank=True,
                help_text="Human-readable description of the range (e.g., 'First week', 'Weekends')",
                max_length=100,
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="range_end",
            field=models.DateField(
                blank=True, help_text="End date for date range expenses", null=True
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="range_start",
            field=models.DateField(
                blank=True, help_text="Start date for date range expenses", null=True
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="recurrence_pattern",
            field=models.CharField(
                blank=True,
                choices=[
                    ("monthly_same_date", "Same date each month"),
                    ("monthly_same_range", "Same range each month"),
                    ("monthly_flexible", "Flexible each month"),
                    ("biweekly_same_day", "Same day biweekly"),
                ],
                help_text="How this recurring expense should repeat",
                max_length=30,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="reminder_days_before",
            field=models.IntegerField(
                default=3,
                help_text="How many days before due date/range to send reminder",
            ),
        ),
        migrations.AddField(
            model_name="budget",
            name="timing_type",
            field=models.CharField(
                choices=[
                    ("fixed_date", "Fixed Date"),
                    ("date_range", "Date Range"),
                    ("flexible", "Flexible"),
                ],
                default="flexible",
                help_text="When this expense should be paid during the month",
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="BudgetTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Template name (e.g., 'Monthly Rent', 'Weekly Groceries')",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of when to use this template",
                        max_length=300,
                    ),
                ),
                (
                    "template_type",
                    models.CharField(
                        choices=[
                            ("bill", "Monthly Bill"),
                            ("grocery", "Groceries"),
                            ("biweekly", "Biweekly Expense"),
                            ("flexible", "Flexible Expense"),
                            ("custom", "Custom Template"),
                        ],
                        help_text="Type of template for categorization",
                        max_length=20,
                    ),
                ),
                (
                    "suggested_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Suggested default amount (optional)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "default_timing_type",
                    models.CharField(
                        choices=[
                            ("fixed_date", "Fixed Date"),
                            ("date_range", "Date Range"),
                            ("flexible", "Flexible"),
                        ],
                        help_text="Default timing type for this template",
                        max_length=20,
                    ),
                ),
                (
                    "default_reminder_days",
                    models.IntegerField(
                        default=3, help_text="Default reminder days before due"
                    ),
                ),
                (
                    "default_time_of_day",
                    models.CharField(
                        choices=[
                            ("morning", "Morning"),
                            ("afternoon", "Afternoon"),
                            ("evening", "Evening"),
                            ("anytime", "Anytime"),
                        ],
                        default="anytime",
                        help_text="Default preferred time of day",
                        max_length=20,
                    ),
                ),
                (
                    "default_is_recurring",
                    models.BooleanField(
                        default=False,
                        help_text="Whether expenses from this template should be recurring by default",
                    ),
                ),
                (
                    "default_recurrence_pattern",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("monthly_same_date", "Same date each month"),
                            ("monthly_same_range", "Same range each month"),
                            ("monthly_flexible", "Flexible each month"),
                            ("biweekly_same_day", "Same day biweekly"),
                        ],
                        help_text="Default recurrence pattern",
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "is_system_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a system-provided template",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this template is active"
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0,
                        help_text="How many times this template has been used",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this template",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "default_category",
                    models.ForeignKey(
                        help_text="Default category for this template",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="budgets.budgetcategory",
                    ),
                ),
                (
                    "space",
                    models.ForeignKey(
                        blank=True,
                        help_text="Space this template belongs to (null for system templates)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="spaces.space",
                    ),
                ),
            ],
            options={
                "verbose_name": "Budget Template",
                "verbose_name_plural": "Budget Templates",
                "db_table": "budget_templates",
                "ordering": ["template_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="SpendingBehaviorAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_day_of_week",
                    models.IntegerField(
                        blank=True,
                        help_text="Most common day of week for spending (1=Monday, 7=Sunday)",
                        null=True,
                    ),
                ),
                (
                    "preferred_time_of_day",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("morning", "Morning"),
                            ("afternoon", "Afternoon"),
                            ("evening", "Evening"),
                        ],
                        help_text="Most common time of day for spending",
                        max_length=20,
                    ),
                ),
                (
                    "average_delay_days",
                    models.IntegerField(
                        default=0,
                        help_text="Average days late vs planned timing (negative = early)",
                    ),
                ),
                (
                    "pattern_confidence",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Confidence in pattern accuracy (0-100%)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "data_points_count",
                    models.IntegerField(
                        default=0, help_text="Number of expenses used for this analysis"
                    ),
                ),
                (
                    "optimal_timing_suggestion",
                    models.CharField(
                        blank=True,
                        help_text="AI-generated optimal timing suggestion",
                        max_length=200,
                    ),
                ),
                (
                    "user_follows_suggestions",
                    models.BooleanField(
                        default=True,
                        help_text="Whether user typically follows timing suggestions",
                    ),
                ),
                (
                    "last_analysis_date",
                    models.DateTimeField(
                        auto_now=True, help_text="When this analysis was last updated"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "category",
                    models.ForeignKey(
                        help_text="Budget category being analyzed",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="budgets.budgetcategory",
                    ),
                ),
                (
                    "space",
                    models.ForeignKey(
                        help_text="Space context for this analysis",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="spaces.space",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User whose behavior is being analyzed",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Spending Behavior Analysis",
                "verbose_name_plural": "Spending Behavior Analyses",
                "db_table": "spending_behavior_analysis",
                "ordering": ["-last_analysis_date"],
                "unique_together": {("user", "space", "category")},
            },
        ),
    ]
